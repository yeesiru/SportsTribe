rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'admin@sportstribe.com';
    }
  
    // Open access to 'rewards' collection
    match /rewards/{rewardId} {
      allow read, write: if true;
    }
    
    // Reward redemptions collection - users can create, admins can manage
    match /reward_redemptions/{redemptionId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // Event attendance collection - organizers and admins can write, users can read their own
    match /event_attendance/{attendanceId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == resource.data.markedBy ||
        isAdmin()
      );
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
    }
      // Attendance sessions collection - any authenticated user can manage
    match /attendance_sessions/{sessionId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.createdBy || isAdmin()
      );
    }
    
    match /users/{userId} {
      allow read, write: if true;
    }
    
    match /joinRequests/{requestId} {
      allow read, write: if request.auth != null;
    }
    
    // Personal events collection (for events created via main page)
    match /events/{eventId} {
      // Allow reading if:
      // 1. Event is public, OR
      // 2. User is the creator of the event
      allow read: if resource.data.isPublic == true || 
        (request.auth != null && request.auth.uid == resource.data.createdBy);
  
    // Only authenticated users can create events and must be the creator
    allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;    // Allow updates if:
    // 1. User is the event creator (for editing), OR
    // 2. Event is public (for joining/leaving - participant updates), OR
    // 3. User is marking attendance (updating completion status)
    allow update: if request.auth != null && (
      request.auth.uid == resource.data.createdBy ||
      (resource.data.isPublic == true && 
       // Only allow updating participants field when joining/leaving
       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants'])) ||
      // Allow attendance marking updates
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isCompleted', 'attendanceMarked', 'completedAt'])
    );
  
  	// Only the event creator can delete
  	allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
		}
    
    // Clubs collection
    match /club/{clubId} {
      // Temporarily allow read access to all, write requires auth or admin
      allow read: if true;
      allow write: if isAdmin() || request.auth != null;      // Messages subcollection - CORRECTLY PLACED INSIDE club collection
      match /messages/{messageId} {
        // Allow authenticated users to read messages
        allow read: if request.auth != null;
        // Allow club members to create messages
        allow create: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/club/$(clubId)).data.members
          && request.auth.uid == request.resource.data.senderId;
        // Allow message sender to update/delete their own messages
        // OR allow club members to update isPinned field for pinning/unpinning
        allow update: if request.auth != null && (
          (request.auth.uid == resource.data.senderId) ||
          (request.auth.uid in get(/databases/$(database)/documents/club/$(clubId)).data.members &&
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPinned']))
        );
        // Only message sender can delete their own messages
        allow delete: if request.auth != null && request.auth.uid == resource.data.senderId;
      }

      // Events subcollection
      match /events/{eventId} {
        // Admin has full access, for public clubs: anyone can read
        // For private clubs: only members can read
        // Anyone can create if they're a club member
        allow read: if isAdmin() || (request.auth != null && (
          get(/databases/$(database)/documents/club/$(clubId)).data.isPrivate != true ||
          request.auth.uid in get(/databases/$(database)/documents/club/$(clubId)).data.members
        ));
        allow create: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/club/$(clubId)).data.members
          && request.auth.uid == request.resource.data.createdBy;        // Admin, event creator, club owner, OR attendance marker can update/delete
        allow update, delete: if isAdmin() || (request.auth != null && (
          request.auth.uid == resource.data.createdBy ||
          request.auth.uid == get(/databases/$(database)/documents/club/$(clubId)).data.creatorId ||
          // Allow attendance marking updates
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isCompleted', 'attendanceMarked', 'completedAt'])
        ));
      }

      // Posts subcollection
      match /posts/{postId} {
        // Admin has full access, anyone can read posts, only club members can create
        allow read: if true;
        allow create: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/club/$(clubId)).data.members
          && request.auth.uid == request.resource.data.createdBy;
        // Admin, post creator, OR club owner can update/delete
        allow update, delete: if isAdmin() || (request.auth != null && (
          request.auth.uid == resource.data.createdBy ||
          request.auth.uid == get(/databases/$(database)/documents/club/$(clubId)).data.creatorId
        ));

        // Comments subcollection (nested under posts)
        match /comments/{commentId} {
          // Anyone can read comments
          allow read: if true;
          // Only club members can create comments, and they must be the author
          allow create: if request.auth != null 
            && request.auth.uid in get(/databases/$(database)/documents/club/$(clubId)).data.members
            && request.auth.uid == request.resource.data.createdBy;
          // Only the comment creator OR club owner can update/delete
          allow update, delete: if request.auth != null && (
            request.auth.uid == resource.data.createdBy ||
            request.auth.uid == get(/databases/$(database)/documents/club/$(clubId)).data.creatorId
          );
        }
      }

      // Requests subcollection (for join requests, if you use it)
      match /requests/{requestId} {
        // Only authenticated users can create a request for themselves
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        // Only the club owner can read, update, or delete requests
        allow read, update, delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/club/$(clubId)).data.creatorId;
      }
    }
    
    // Root-level Events collection (if used)
    match /events/{eventId} {
      allow read, write: if isAdmin() || request.auth != null;
    }
    
    // Root-level Posts collection (if used) 
    match /posts/{postId} {
      allow read, write: if isAdmin() || request.auth != null;
    }
    
    // Root-level Join Requests collection (if used)
    match /join_requests/{requestId} {
      allow read, write: if isAdmin() || request.auth != null;
    }
  }
}
